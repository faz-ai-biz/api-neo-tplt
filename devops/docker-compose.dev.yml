networks:
  frontend:
    name: ${COMPOSE_PROJECT_NAME:-api}_frontend_dev
  backend:
    name: ${COMPOSE_PROJECT_NAME:-api}_backend_dev

services:
  redis:
    env_file:
      - .env.dev  
    container_name: ${COMPOSE_PROJECT_NAME:-api}-redis-${ENVIRONMENT}
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    command: redis-server --save "" --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30


  web:
    env_file:
      - .env.dev  
    container_name: ${COMPOSE_PROJECT_NAME:-api}-web-${ENVIRONMENT}
    build:
      context: ..
      dockerfile: devops/Dockerfile.${ENVIRONMENT}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ..:/app/
      - .env.dev:/app/.env
    entrypoint: ["/app/devops/scripts/startup.sh"]
    networks:
      - frontend
      - backend

  db:
    env_file:
      - .env.dev 
    container_name: ${COMPOSE_PROJECT_NAME:-api}-db-${ENVIRONMENT}
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

volumes:
  redis_data:
  postgres_data:
